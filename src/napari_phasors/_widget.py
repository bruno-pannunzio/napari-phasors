"""
This module contains four napari widgets declared in
different ways:

- a pure Python function flagged with `autogenerate: true`
    in the plugin manifest. Type annotations are used by
    magicgui to generate widgets for each parameter. Best
    suited for simple processing tasks - usually taking
    in and/or returning a layer.
- a `magic_factory` decorated function. The `magic_factory`
    decorator allows us to customize aspects of the resulting
    GUI, including the widgets associated with each parameter.
    Best used when you have a very simple processing task,
    but want some control over the autogenerated widgets. If you
    find yourself needing to define lots of nested functions to achieve
    your functionality, maybe look at the `Container` widget!
- a `magicgui.widgets.Container` subclass. This provides lots
    of flexibility and customization options while still supporting
    `magicgui` widgets and convenience methods for creating widgets
    from type annotations. If you want to customize your widgets and
    connect callbacks, this is the best widget option for you.
- a `QWidget` subclass. This provides maximal flexibility but requires
    full specification of widget layouts, callbacks, events, etc.

References:
- Widget specification: https://napari.org/stable/plugins/guides.html?#widgets
- magicgui docs: https://pyapp-kit.github.io/magicgui/

Replace code below according to your needs.
"""

from typing import TYPE_CHECKING

from magicgui import magic_factory
from magicgui.widgets import CheckBox, Container, create_widget
from qtpy.QtWidgets import QHBoxLayout, QPushButton, QWidget, QTreeView, QDirModel, QComboBox, QLabel, QVBoxLayout
from skimage.util import img_as_float
from ._reader import napari_get_reader, _get_filename_extension

if TYPE_CHECKING:
    import napari

# Uses the `autogenerate: true` flag in the plugin manifest
# to indicate it should be wrapped as a magicgui to autogenerate
# a widget.
def threshold_autogenerate_widget(
    img: "napari.types.ImageData",
    threshold: "float",
) -> "napari.types.LabelsData":
    return img_as_float(img) > threshold


# the magic_factory decorator lets us customize aspects of our widget
# we specify a widget type for the threshold parameter
# and use auto_call=True so the function is called whenever
# the value of a parameter changes
@magic_factory(
    threshold={"widget_type": "FloatSlider", "max": 1}, auto_call=True
)
def threshold_magic_widget(
    img_layer: "napari.layers.Image", threshold: "float"
) -> "napari.types.LabelsData":
    return img_as_float(img_layer.data) > threshold


# if we want even more control over our widget, we can use
# magicgui `Container`
class ImageThreshold(Container):
    def __init__(self, viewer: "napari.viewer.Viewer"):
        super().__init__()
        self._viewer = viewer
        # use create_widget to generate widgets from type annotations
        self._image_layer_combo = create_widget(
            label="Image", annotation="napari.layers.Image"
        )
        self._threshold_slider = create_widget(
            label="Threshold", annotation=float, widget_type="FloatSlider"
        )
        self._threshold_slider.min = 0
        self._threshold_slider.max = 1
        # use magicgui widgets directly
        self._invert_checkbox = CheckBox(text="Keep pixels below threshold")

        # connect your own callbacks
        self._threshold_slider.changed.connect(self._threshold_im)
        self._invert_checkbox.changed.connect(self._threshold_im)

        # append into/extend the container with your widgets
        self.extend(
            [
                self._image_layer_combo,
                self._threshold_slider,
                self._invert_checkbox,
            ]
        )

    def _threshold_im(self):
        image_layer = self._image_layer_combo.value
        if image_layer is None:
            return

        image = img_as_float(image_layer.data)
        name = image_layer.name + "_thresholded"
        threshold = self._threshold_slider.value
        if self._invert_checkbox.value:
            thresholded = image < threshold
        else:
            thresholded = image > threshold
        if name in self._viewer.layers:
            self._viewer.layers[name].data = thresholded
        else:
            self._viewer.add_labels(thresholded, name=name)


class ExampleQWidget(QWidget):
    # your QWidget.__init__ can optionally request the napari viewer instance
    # use a type annotation of 'napari.viewer.Viewer' for any parameter
    def __init__(self, viewer: "napari.viewer.Viewer"):
        super().__init__()
        self.viewer = viewer

        btn = QPushButton("Click me!")
        btn.clicked.connect(self._on_click)

        self.setLayout(QHBoxLayout())
        self.layout().addWidget(btn)

    def _on_click(self):
        print("napari has", len(self.viewer.layers), "layers")

class PhasorTransform(QWidget):
    def __init__(self, viewer: "napari.viewer.Viewer"):
        super().__init__()
        self.viewer = viewer

        # Create main layout
        main_layout = QVBoxLayout(self)

        # Create search tree
        search_tree = QTreeView()
        model = QDirModel()
        search_tree.setModel(model)
        search_tree.setColumnHidden(1, True)
        search_tree.setColumnHidden(2, True)
        search_tree.setColumnHidden(3, True)
        search_tree.resize(640, 480)
        main_layout.addWidget(search_tree)

        # Create layout for dynamic widgets
        self.dynamic_widget_layout = QVBoxLayout()
        main_layout.addLayout(self.dynamic_widget_layout)

        # Set up callbacks whenever the selection changes
        selection = search_tree.selectionModel()
        selection.currentChanged.connect(lambda current, previous: self._on_change(current, previous, model))

        # Define reader options (example)
        self.reader_options = {
            '.fbd': self._create_fbd_widget,
            '.ptu': self._create_ptu_widget,
            '.lsm': self._create_lsm_widget,
            '.tif': self._create_tif_widget,
        }

    def _on_change(self, current, previous, model):
        path = model.filePath(current)
        filename, extension = _get_filename_extension(path)
        if extension in self.reader_options:
            # Clear existing widgets
            for i in reversed(range(self.dynamic_widget_layout.count())):
                widget = self.dynamic_widget_layout.takeAt(i).widget()
                widget.deleteLater()

            # Create new widgets based on extension
            create_widget_func = self.reader_options[extension]
            new_widget = create_widget_func(path)
            self.dynamic_widget_layout.addWidget(new_widget)

    def _create_fbd_widget(self, path):
        # Create a widget for fbd files
        fbd_widget = QWidget()
        layout = QVBoxLayout(fbd_widget)
        layout.addWidget(QLabel("Frames: "))
        layout.addWidget(QComboBox)
        return fbd_widget

    def _create_ptu_widget(self, path):
        # Create a widget for PTU files
        PTU_widget = QLabel(f"PTU file: {path}")
        return PTU_widget

    def _create_lsm_widget(self, path):
        # Create a widget for lsm files
        lsm_widget = QLabel(f"lsm file: {path}")
        return lsm_widget
    
    def _create_tif_widget(self, path):
        # Create a widget for tif files
        tif_widget = QLabel(f"tif file: {path}")
        return tif_widget

    #     # Connect callbacks
    #     self.phasor_transofrm_widget.calibrate_push_button.clicked.connect(self._on_click)

    #     # Connect layer events to populate combobox
    #     self.viewer.layers.events.inserted.connect(self._populate_comboboxes)
    #     self.viewer.layers.events.removed.connect(self._populate_comboboxes)

    #     # Populate combobox
    #     self._populate_comboboxes()

    #     mainLayout = QVBoxLayout()
    #     mainLayout.addWidget(self.phasor_transofrm_widget)
    #     self.setLayout(mainLayout)
    #     # Call plotter with calibrated layer in the combobox
    #     # self.plotter = PlotterWidget(self.viewer)
    #     # self.viewer.window.add_dock_widget(self.plotter)

    # def _populate_comboboxes(self):
    #     self.phasor_transofrm_widget.calibration_layer_combobox.clear()
    #     image_layers = [layer for layer in self.viewer.layers if isinstance(layer, Image)]
    #     # print(image_layers)
    #     for layer in image_layers:
    #         self.phasor_transofrm_widget.calibration_layer_combobox.addItem(layer.name)

    #     self.phasor_transofrm_widget.sample_layer_combobox.clear()
    #     image_layers = [layer for layer in self.viewer.layers if isinstance(layer, Image)]
    #     # print(image_layers)
    #     for layer in image_layers:
    #         self.phasor_transofrm_widget.sample_layer_combobox.addItem(layer.name)

    # def _on_click(self):
    #     frequency = int(self.phasor_transofrm_widget.frequency_line_edit_widget.text())
    #     lifetime = float(self.phasor_transofrm_widget.lifetime_line_edit_widget.text())
    #     sample_name = self.phasor_transofrm_widget.sample_layer_combobox.currentText()
    #     cal_name = self.phasor_transofrm_widget.calibration_layer_combobox.currentText()
    #     sample_metadata = self.viewer.layers[sample_name].metadata
    #     sample_phasor_data = sample_metadata['phasor_features_labels_layer'].features
    #     cal_phasor_data = self.viewer.layers[cal_name].metadata['phasor_features_labels_layer'].features
    #     print(sample_metadata.keys())
    #     if 'calibrated' not in sample_metadata.keys() or sample_metadata['calibrated'] is False:
    #         g_img, s_img = phasor_calibrate(
    #             sample_phasor_data['G'],
    #             sample_phasor_data['S'],
    #             cal_phasor_data['G'],
    #             cal_phasor_data['S'],
    #             frequency=frequency,
    #             lifetime=lifetime,
    #         )
    #         sample_phasor_data['G'] = g_img
    #         sample_phasor_data['S'] = s_img
    #         self.plotter.plot()
    #         sample_metadata['calibrated'] = True
    #     elif sample_metadata['calibrated'] == True:
    #         show_error("Layer already calibrated")